import fs from 'fs';
import path from 'path';
import archiver from 'archiver';

export const config = {
  api: {
    bodyParser: false,
  },
};

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });
  try {
    const specPath = path.join(process.cwd(), '.kiro', 'specs.yaml');
    if (!fs.existsSync(specPath)) return res.status(400).json({ error: 'No spec found.' });
    const spec = fs.readFileSync(specPath, 'utf8');

    // Create a temp dir for the generated app
    const tmpDir = path.join(process.cwd(), '.kiro', 'generated-app');
    if (fs.existsSync(tmpDir)) fs.rmSync(tmpDir, { recursive: true });
    fs.mkdirSync(tmpDir, { recursive: true });

    // Write the spec
    fs.writeFileSync(path.join(tmpDir, 'kiro-spec.yaml'), spec, 'utf8');

    // Minimal backend/app.py
    const backendDir = path.join(tmpDir, 'backend');
    fs.mkdirSync(backendDir);
    fs.writeFileSync(path.join(backendDir, 'app.py'), `# Generated by CodeGenesis\nprint('Hello from backend!')\n`, 'utf8');

    // Minimal frontend/pages/index.js
    const frontendDir = path.join(tmpDir, 'frontend', 'pages');
    fs.mkdirSync(frontendDir, { recursive: true });
    fs.writeFileSync(path.join(frontendDir, 'index.js'), `// Generated by CodeGenesis\nexport default function Home() {\n  return <h1>Welcome to your generated app!</h1>;\n}\n`, 'utf8');

    // README
    fs.writeFileSync(path.join(tmpDir, 'README.md'), `# Generated App\n\nThis app was generated from a Kiro spec.\n\n## Spec\n\n\n\n\n`, 'utf8');

    // Zip the folder
    res.setHeader('Content-Type', 'application/zip');
    res.setHeader('Content-Disposition', 'attachment; filename=generated-app.zip');
    const archive = archiver('zip', { zlib: { level: 9 } });
    archive.directory(tmpDir, false);
    archive.pipe(res);
    await archive.finalize();
  } catch (e) {
    res.status(500).json({ error: 'Failed to build app.' });
  }
} 